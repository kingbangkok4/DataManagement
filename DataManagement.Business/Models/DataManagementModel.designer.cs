#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataManagement.Business.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Mathematics_DB")]
	public partial class DataManagementModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPersonal(Personal instance);
    partial void UpdatePersonal(Personal instance);
    partial void DeletePersonal(Personal instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertBorrow(Borrow instance);
    partial void UpdateBorrow(Borrow instance);
    partial void DeleteBorrow(Borrow instance);
    partial void InsertReservation(Reservation instance);
    partial void UpdateReservation(Reservation instance);
    partial void DeleteReservation(Reservation instance);
    #endregion
		
		public DataManagementModelDataContext() : 
				base(global::DataManagement.Business.Properties.Settings.Default.Mathematics_DBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataManagementModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataManagementModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataManagementModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataManagementModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Personal> Personals
		{
			get
			{
				return this.GetTable<Personal>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Borrow> Borrows
		{
			get
			{
				return this.GetTable<Borrow>();
			}
		}
		
		public System.Data.Linq.Table<Reservation> Reservations
		{
			get
			{
				return this.GetTable<Reservation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Personal")]
	public partial class Personal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PersonalID;
		
		private string _PersonalFname;
		
		private string _PersonalName;
		
		private string _PersonalLName;
		
		private string _Position;
		
		private string _PersonalAddress;
		
		private string _PersonalEmail;
		
		private string _PersonalPic;
		
		private EntitySet<Borrow> _Borrows;
		
		private EntitySet<Reservation> _Reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonalIDChanging(string value);
    partial void OnPersonalIDChanged();
    partial void OnPersonalFnameChanging(string value);
    partial void OnPersonalFnameChanged();
    partial void OnPersonalNameChanging(string value);
    partial void OnPersonalNameChanged();
    partial void OnPersonalLNameChanging(string value);
    partial void OnPersonalLNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPersonalAddressChanging(string value);
    partial void OnPersonalAddressChanged();
    partial void OnPersonalEmailChanging(string value);
    partial void OnPersonalEmailChanged();
    partial void OnPersonalPicChanging(string value);
    partial void OnPersonalPicChanged();
    #endregion
		
		public Personal()
		{
			this._Borrows = new EntitySet<Borrow>(new Action<Borrow>(this.attach_Borrows), new Action<Borrow>(this.detach_Borrows));
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PersonalID
		{
			get
			{
				return this._PersonalID;
			}
			set
			{
				if ((this._PersonalID != value))
				{
					this.OnPersonalIDChanging(value);
					this.SendPropertyChanging();
					this._PersonalID = value;
					this.SendPropertyChanged("PersonalID");
					this.OnPersonalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalFname", DbType="NVarChar(100)")]
		public string PersonalFname
		{
			get
			{
				return this._PersonalFname;
			}
			set
			{
				if ((this._PersonalFname != value))
				{
					this.OnPersonalFnameChanging(value);
					this.SendPropertyChanging();
					this._PersonalFname = value;
					this.SendPropertyChanged("PersonalFname");
					this.OnPersonalFnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalName", DbType="NVarChar(100)")]
		public string PersonalName
		{
			get
			{
				return this._PersonalName;
			}
			set
			{
				if ((this._PersonalName != value))
				{
					this.OnPersonalNameChanging(value);
					this.SendPropertyChanging();
					this._PersonalName = value;
					this.SendPropertyChanged("PersonalName");
					this.OnPersonalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalLName", DbType="NVarChar(MAX)")]
		public string PersonalLName
		{
			get
			{
				return this._PersonalLName;
			}
			set
			{
				if ((this._PersonalLName != value))
				{
					this.OnPersonalLNameChanging(value);
					this.SendPropertyChanging();
					this._PersonalLName = value;
					this.SendPropertyChanged("PersonalLName");
					this.OnPersonalLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(100)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalAddress", DbType="NVarChar(MAX)")]
		public string PersonalAddress
		{
			get
			{
				return this._PersonalAddress;
			}
			set
			{
				if ((this._PersonalAddress != value))
				{
					this.OnPersonalAddressChanging(value);
					this.SendPropertyChanging();
					this._PersonalAddress = value;
					this.SendPropertyChanged("PersonalAddress");
					this.OnPersonalAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalEmail", DbType="NVarChar(255)")]
		public string PersonalEmail
		{
			get
			{
				return this._PersonalEmail;
			}
			set
			{
				if ((this._PersonalEmail != value))
				{
					this.OnPersonalEmailChanging(value);
					this.SendPropertyChanging();
					this._PersonalEmail = value;
					this.SendPropertyChanged("PersonalEmail");
					this.OnPersonalEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalPic", DbType="NVarChar(MAX)")]
		public string PersonalPic
		{
			get
			{
				return this._PersonalPic;
			}
			set
			{
				if ((this._PersonalPic != value))
				{
					this.OnPersonalPicChanging(value);
					this.SendPropertyChanging();
					this._PersonalPic = value;
					this.SendPropertyChanged("PersonalPic");
					this.OnPersonalPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personal_Borrow", Storage="_Borrows", ThisKey="PersonalID", OtherKey="PersonalID")]
		public EntitySet<Borrow> Borrows
		{
			get
			{
				return this._Borrows;
			}
			set
			{
				this._Borrows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personal_Reservation", Storage="_Reservations", ThisKey="PersonalID", OtherKey="PersonalID")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Borrows(Borrow entity)
		{
			this.SendPropertyChanging();
			entity.Personal = this;
		}
		
		private void detach_Borrows(Borrow entity)
		{
			this.SendPropertyChanging();
			entity.Personal = null;
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Personal = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Personal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resource")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceID;
		
		private string _ResourcePic;
		
		private string _ResourceName;
		
		private System.Nullable<int> _NumResource;
		
		private string _ResourceDetail;
		
		private EntitySet<Borrow> _Borrows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    partial void OnResourcePicChanging(string value);
    partial void OnResourcePicChanged();
    partial void OnResourceNameChanging(string value);
    partial void OnResourceNameChanged();
    partial void OnNumResourceChanging(System.Nullable<int> value);
    partial void OnNumResourceChanged();
    partial void OnResourceDetailChanging(string value);
    partial void OnResourceDetailChanged();
    #endregion
		
		public Resource()
		{
			this._Borrows = new EntitySet<Borrow>(new Action<Borrow>(this.attach_Borrows), new Action<Borrow>(this.detach_Borrows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourcePic", DbType="NVarChar(MAX)")]
		public string ResourcePic
		{
			get
			{
				return this._ResourcePic;
			}
			set
			{
				if ((this._ResourcePic != value))
				{
					this.OnResourcePicChanging(value);
					this.SendPropertyChanging();
					this._ResourcePic = value;
					this.SendPropertyChanged("ResourcePic");
					this.OnResourcePicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceName", DbType="NVarChar(255)")]
		public string ResourceName
		{
			get
			{
				return this._ResourceName;
			}
			set
			{
				if ((this._ResourceName != value))
				{
					this.OnResourceNameChanging(value);
					this.SendPropertyChanging();
					this._ResourceName = value;
					this.SendPropertyChanged("ResourceName");
					this.OnResourceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumResource", DbType="Int")]
		public System.Nullable<int> NumResource
		{
			get
			{
				return this._NumResource;
			}
			set
			{
				if ((this._NumResource != value))
				{
					this.OnNumResourceChanging(value);
					this.SendPropertyChanging();
					this._NumResource = value;
					this.SendPropertyChanged("NumResource");
					this.OnNumResourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceDetail", DbType="NVarChar(MAX)")]
		public string ResourceDetail
		{
			get
			{
				return this._ResourceDetail;
			}
			set
			{
				if ((this._ResourceDetail != value))
				{
					this.OnResourceDetailChanging(value);
					this.SendPropertyChanging();
					this._ResourceDetail = value;
					this.SendPropertyChanged("ResourceDetail");
					this.OnResourceDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Borrow", Storage="_Borrows", ThisKey="ResourceID", OtherKey="ResourceID")]
		public EntitySet<Borrow> Borrows
		{
			get
			{
				return this._Borrows;
			}
			set
			{
				this._Borrows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Borrows(Borrow entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_Borrows(Borrow entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoomID;
		
		private string _RoomPic;
		
		private string _RoomDetail;
		
		private EntitySet<Reservation> _Reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(string value);
    partial void OnRoomIDChanged();
    partial void OnRoomPicChanging(string value);
    partial void OnRoomPicChanged();
    partial void OnRoomDetailChanging(string value);
    partial void OnRoomDetailChanged();
    #endregion
		
		public Room()
		{
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomPic", DbType="NVarChar(MAX)")]
		public string RoomPic
		{
			get
			{
				return this._RoomPic;
			}
			set
			{
				if ((this._RoomPic != value))
				{
					this.OnRoomPicChanging(value);
					this.SendPropertyChanging();
					this._RoomPic = value;
					this.SendPropertyChanged("RoomPic");
					this.OnRoomPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomDetail", DbType="NVarChar(MAX)")]
		public string RoomDetail
		{
			get
			{
				return this._RoomDetail;
			}
			set
			{
				if ((this._RoomDetail != value))
				{
					this.OnRoomDetailChanging(value);
					this.SendPropertyChanging();
					this._RoomDetail = value;
					this.SendPropertyChanged("RoomDetail");
					this.OnRoomDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Reservation", Storage="_Reservations", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Borrow")]
	public partial class Borrow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _BorrowID;
		
		private int _ResourceID;
		
		private string _PersonalID;
		
		private System.Nullable<System.DateTime> _BorrowDT;
		
		private string _StaffID;
		
		private System.Nullable<System.DateTime> _ReturnDT;
		
		private System.Nullable<int> _Numborrow;
		
		private EntityRef<Resource> _Resource;
		
		private EntityRef<Personal> _Personal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBorrowIDChanging(long value);
    partial void OnBorrowIDChanged();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    partial void OnPersonalIDChanging(string value);
    partial void OnPersonalIDChanged();
    partial void OnBorrowDTChanging(System.Nullable<System.DateTime> value);
    partial void OnBorrowDTChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnReturnDTChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDTChanged();
    partial void OnNumborrowChanging(System.Nullable<int> value);
    partial void OnNumborrowChanged();
    #endregion
		
		public Borrow()
		{
			this._Resource = default(EntityRef<Resource>);
			this._Personal = default(EntityRef<Personal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long BorrowID
		{
			get
			{
				return this._BorrowID;
			}
			set
			{
				if ((this._BorrowID != value))
				{
					this.OnBorrowIDChanging(value);
					this.SendPropertyChanging();
					this._BorrowID = value;
					this.SendPropertyChanged("BorrowID");
					this.OnBorrowIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="Int NOT NULL")]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PersonalID
		{
			get
			{
				return this._PersonalID;
			}
			set
			{
				if ((this._PersonalID != value))
				{
					if (this._Personal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonalIDChanging(value);
					this.SendPropertyChanging();
					this._PersonalID = value;
					this.SendPropertyChanged("PersonalID");
					this.OnPersonalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorrowDT", DbType="DateTime")]
		public System.Nullable<System.DateTime> BorrowDT
		{
			get
			{
				return this._BorrowDT;
			}
			set
			{
				if ((this._BorrowDT != value))
				{
					this.OnBorrowDTChanging(value);
					this.SendPropertyChanging();
					this._BorrowDT = value;
					this.SendPropertyChanged("BorrowDT");
					this.OnBorrowDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NVarChar(10)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDT", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReturnDT
		{
			get
			{
				return this._ReturnDT;
			}
			set
			{
				if ((this._ReturnDT != value))
				{
					this.OnReturnDTChanging(value);
					this.SendPropertyChanging();
					this._ReturnDT = value;
					this.SendPropertyChanged("ReturnDT");
					this.OnReturnDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numborrow", DbType="Int")]
		public System.Nullable<int> Numborrow
		{
			get
			{
				return this._Numborrow;
			}
			set
			{
				if ((this._Numborrow != value))
				{
					this.OnNumborrowChanging(value);
					this.SendPropertyChanging();
					this._Numborrow = value;
					this.SendPropertyChanged("Numborrow");
					this.OnNumborrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Borrow", Storage="_Resource", ThisKey="ResourceID", OtherKey="ResourceID", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.Borrows.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.Borrows.Add(this);
						this._ResourceID = value.ResourceID;
					}
					else
					{
						this._ResourceID = default(int);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personal_Borrow", Storage="_Personal", ThisKey="PersonalID", OtherKey="PersonalID", IsForeignKey=true)]
		public Personal Personal
		{
			get
			{
				return this._Personal.Entity;
			}
			set
			{
				Personal previousValue = this._Personal.Entity;
				if (((previousValue != value) 
							|| (this._Personal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Personal.Entity = null;
						previousValue.Borrows.Remove(this);
					}
					this._Personal.Entity = value;
					if ((value != null))
					{
						value.Borrows.Add(this);
						this._PersonalID = value.PersonalID;
					}
					else
					{
						this._PersonalID = default(string);
					}
					this.SendPropertyChanged("Personal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservation")]
	public partial class Reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReservationID;
		
		private string _RoomID;
		
		private string _PersonalID;
		
		private System.Nullable<System.DateTime> _ReservationDate;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _EndTime;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private EntityRef<Personal> _Personal;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIDChanging(long value);
    partial void OnReservationIDChanged();
    partial void OnRoomIDChanging(string value);
    partial void OnRoomIDChanged();
    partial void OnPersonalIDChanging(string value);
    partial void OnPersonalIDChanged();
    partial void OnReservationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReservationDateChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEndTimeChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Reservation()
		{
			this._Personal = default(EntityRef<Personal>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PersonalID
		{
			get
			{
				return this._PersonalID;
			}
			set
			{
				if ((this._PersonalID != value))
				{
					if (this._Personal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonalIDChanging(value);
					this.SendPropertyChanging();
					this._PersonalID = value;
					this.SendPropertyChanged("PersonalID");
					this.OnPersonalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ReservationDate
		{
			get
			{
				return this._ReservationDate;
			}
			set
			{
				if ((this._ReservationDate != value))
				{
					this.OnReservationDateChanging(value);
					this.SendPropertyChanging();
					this._ReservationDate = value;
					this.SendPropertyChanged("ReservationDate");
					this.OnReservationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.TimeSpan> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion", CanBeNull=true, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personal_Reservation", Storage="_Personal", ThisKey="PersonalID", OtherKey="PersonalID", IsForeignKey=true)]
		public Personal Personal
		{
			get
			{
				return this._Personal.Entity;
			}
			set
			{
				Personal previousValue = this._Personal.Entity;
				if (((previousValue != value) 
							|| (this._Personal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Personal.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Personal.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._PersonalID = value.PersonalID;
					}
					else
					{
						this._PersonalID = default(string);
					}
					this.SendPropertyChanged("Personal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Reservation", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(string);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
